package com.gzk.client;

import android.os.Handler;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Toast;

import com.gzk.client.mina.ConnectLisenter;
import com.gzk.client.mina.MinaClientManager;
import com.gzk.client.mina.MinaConfig;
import com.gzk.client.mina.MinaReciveFailEvent;

import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.Subscribe;
import org.greenrobot.eventbus.ThreadMode;

import java.util.ArrayList;
import java.util.List;

public class MainActivity extends AppCompatActivity implements View.OnClickListener {
    private EditText etContent;

    private ListView lsRecord;
    private RecordAdapter mAdapter;
    private List<RecordBean> mData = new ArrayList<>();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        EventBus.getDefault().register(this);
        setContentView(R.layout.activity_main);
        etContent = findViewById(R.id.et_content);
        findViewById(R.id.tv_send).setOnClickListener(this);
        findViewById(R.id.tv_connect).setOnClickListener(this);
        findViewById(R.id.tv_disconnect).setOnClickListener(this);


        lsRecord = findViewById(R.id.ls_record);
        mAdapter = new RecordAdapter(this, mData);
        lsRecord.setAdapter(mAdapter);

        initMina();

    }

    private void initMina() {
        MinaConfig.Builder builder = new MinaConfig.Builder()
                .setIp(Constant.MINA_HOST)
                .setConnectionTimeout(10000)
                .setReadBuilder(10240)
                .setPort(Constant.MINA_PORT)
                .setConnectLisenter(new ConnectLisenter() {
                    @Override
                    public void connFail() {
                        Log.e("mina", "server connect fail");
                        //Toast.makeText(MainActivity.this, "server connect fail", Toast.LENGTH_SHORT).show();
                    }

                    @Override
                    public void connSucc() {
                        Log.e("mina", "server connect succ");
                        //Toast.makeText(MainActivity.this, "server connect succ", Toast.LENGTH_SHORT).show();
                    }

                    @Override
                    public void connDis() {
                        Log.e("mina", "server connect disconnect");
                        //Toast.makeText(MainActivity.this, "server connect disconnect", Toast.LENGTH_SHORT).show();
                    }
                });


        MinaClientManager.getManagerInstance().initConfig(builder.builder());
        MinaClientManager.getManagerInstance().connect();

    }


    @Subscribe(threadMode = ThreadMode.MAIN)
    public void receiveEvent(RecordBean messageEvent) {
        if (messageEvent != null) {
            mAdapter.addData(messageEvent);
        }else {
            Toast.makeText(MainActivity.this, "receiveEvent is null" , Toast.LENGTH_SHORT).show();
        }

    }

    @Subscribe(threadMode = ThreadMode.MAIN)
    public void receiveFailEvent(MinaReciveFailEvent event) {
        Log.e("receive", "receiveFailEvent:" + event.getMsg());
        Toast.makeText(MainActivity.this, "receiveFailEvent:" + event.getMsg(), Toast.LENGTH_SHORT).show();
    }

    @Override
    protected void onDestroy() {
        EventBus.getDefault().unregister(this);
        super.onDestroy();
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.tv_send:
                send();
                break;
            case R.id.tv_connect:
                connect();
                break;
            case R.id.tv_disconnect:
                MinaClientManager.getManagerInstance().disConnect();
                break;
            default:
                break;
        }
    }

    private void connect() {
        MinaClientManager.getManagerInstance().connect();

    }

    private void send() {
        final String str = etContent.getText().toString();
        MinaClientManager.getManagerInstance().send(str);
    }





    private String TEST_LARGE_MSG = "当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "1.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "2.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "3.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "4.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "5.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "6.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "7.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "8.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "9.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "10.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "11.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "12.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "13.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "14.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "16.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "17.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "18.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "19.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "20.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "21.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "22.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "23.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "24.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "25.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "26.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "27.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "28.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "29.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "30.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "31.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "32.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "33.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "34.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "35.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "36.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "37.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "38.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "39.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "40.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "41.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "42.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "43.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "44.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "46.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "47.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "48.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "49.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "50.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "51.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "52.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "53.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "54.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "55.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "56.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "57.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "58.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）" +
            "59.当客户端数据量过大时，TCP协议会自动分包进行数据传输（何时分包，如何分包，每包大小尚未研究）， 使用netty做server时，netty会根据当前接收到的数据包大小（适用于当前连接），自动调整下次接收到数据包大小（TCP默认大小为1024，当数据包不超过1024时，会一次接收完毕，当超过1024时，下次自动增长为2048，然后下次增长为3072，然后下次增长为4096；然而，再往下增长，则增长了2048变为6144，然后变为8192，数据包增长到8192就已经是极限了（8KB），当客户端数据再大时，接收到的数据包也不再改变。此后，只要发送的数据包大小不超过8192，netty server一律按照一个包接收，不再分包）";

}
